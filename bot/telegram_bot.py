import telebot as tb
from config.config import *
from models.people.users import *
from models.command_permissions import *

APP_CONFIG_PATH = './config/config.ini'
app_config = Config(APP_CONFIG_PATH)
bot = tb.TeleBot(app_config.get_setting('TelegramAPI', 'api_key'))


@bot.message_handler(commands=['start'])
def start(message):
    user_role = get_user_role_by_telegram_id(message.chat.id)
    user_authentication(user_role, message.chat.id)


# @bot.message_handler(func=lambda message: True)
# def echo(message):
#     bot.send_message(message.chat.id, message.text)


def user_authentication(user_role, chat_id):
    """
    Use this method when running a bot to validate user data and to determine user role.

    :param user_role: user role ID.
    :param chat_id: user Telegram chat ID.
    """
    is_user_banned(chat_id)

    if user_role is None:
        bot.send_message(chat_id, u'–ù–µ –º–æ–∂–µ–º–æ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, –¥–ª—è —á–æ–≥–æ –í–∏ —Ç—É—Ç, –∑–≤–µ—Ä–Ω—ñ—Ç—å –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏! üòâ')
    elif user_role == 1:
        bot.set_my_commands(generate_command_list(1))
        bot.send_message(chat_id, u'–í—ñ—Ç–∞—é, –í–æ–ª–æ–¥–∞—Ä–µ!')
    elif user_role == 2:
        bot.set_my_commands(generate_command_list(2))
        bot.send_message(chat_id, u'–í—ñ—Ç–∞—é –≤ –µ–∫—ñ–ø–∞–∂—ñ, –ö—É–ª—î—Ä!')
        bot.send_sticker(chat_id, 'CAACAgIAAxkBAAEhS_9kZzn2f7zaEm7rank-Du1kjbUFRwACjS0AAkDyIUvYFQve9Itbti8E')
    elif user_role == 3:
        bot.set_my_commands(generate_command_list(3))
        markup = tb.types.ReplyKeyboardMarkup()
        markup.row_width = 1
        markup.resize_keyboard = True
        markup.add(tb.types.KeyboardButton(u'üì® –ü–æ–¥–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è'))
        bot.send_message(chat_id, "–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –Ü–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞! üëã"
                                  "\n–ü–æ–¥–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –¥–≤–æ–º–∞ —Å–ø–æ—Å–æ–±–∞–º–∏:"
                                  "\n1Ô∏è‚É£ –û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è'."
                                  "\n2Ô∏è‚É£ –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–±–ª–µ–º–æ—é (–º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å) —É —Ü–µ–π —á–∞—Ç."
                                  "\n–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è'.",
                         reply_markup=markup)
    else:
        bot.send_message(chat_id, u'–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –º–∏ –∑ –í–∞–º–∏ –Ω–µ –∑–Ω–∞–π–æ–º—ñ! –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ üòâ')


def is_user_banned(user_chat_id):
    """
    The method checks if the user has banned the bot.

    :param user_chat_id: user Telegram chat ID.
    """

    try:
        # Attempt to send a test message to the user
        bot.send_message(user_chat_id, "Checking block status...")
        print("User has not blocked the bot.")
    except tb.apihelper.ApiException as e:
        if e.result.status_code == 403:
            for adm in get_admins_chat_id():
                bot.send_message(adm[0], f'‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è User {user_chat_id} has blocked the bot!')
            print("User has blocked the bot.")
        else:
            for adm in get_admins_chat_id():
                bot.send_message(adm[0], f'‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è An error occurred while checking user status!')
            print("An error occurred while checking user status.")
